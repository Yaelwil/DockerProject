name: Polybot Service Deployment

on:
  push:
    branches:
      - main

env:
  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }} # TODO replace to your EC2 instance public IP

jobs:
  PolybotBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot
          
          # Login to ECR (commend in in case you use ECR, change region code and ECR URI):
          # export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          # export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 352708296901.dkr.ecr.eu-central-1.amazonaws.com
          
          # Login to DockerHub (comment out if you don't use DockerHub):         
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:${{ github.run_number }}
          docker build -t $POLYBOT_IMAGE_NAME .
          docker push $POLYBOT_IMAGE_NAME

  Yolo5Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd yolo5
          
          # export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          # export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 352708296901.dkr.ecr.eu-central-1.amazonaws.com
               
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          YOLOV5_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/yolov5:${{ github.run_number }}
          docker build -t $YOLOV5_IMAGE_NAME .
          docker push $YOLOV5_IMAGE_NAME

  ReplicaInitializerBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd ubuntu_docker
          
          # export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          # export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 352708296901.dkr.ecr.eu-central-1.amazonaws.com
               
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          REPLICA_INITIALIZER_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/replica_initializer:${{ github.run_number }}
          docker build -t $REPLICA_INITIALIZER_IMAGE_NAME .
          docker push $REPLICA_INITIALIZER_IMAGE_NAME

  Deploy:
    name: Deploy Docker compose project
    runs-on: ubuntu-latest
    needs:
      - PolybotBuild
      - Yolo5Build
      - ReplicaInitializerBuild

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Copy Compose files to the EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: docker-compose.yaml
          target: PolybotService/

      - name: Update the Docker Compose project in the EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # You deployment script here.
            
            sudo apt update && sudo apt install jq -y
            
            cd PolybotService/
            
            # Save telegram bot token in a secret file, to be used in docker-compose.yaml
            echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" > telegram_bot_token.secret
            
            # Get the ngrok current domain (you should assume ngrok is already running in the EC2)
            NGROK_DOMAIN=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            
            # Generate .env file
            echo """
            TELEGRAM_APP_URL=${{ secrets.TELEGRAM_APP_URL }}
            
            # Base image
            mongodb_image=mongo:4.4.0
            yolo5_image=${POLYBOT_IMAGE_NAME}
            polybot_image=${YOLOV5_IMAGE_NAME}
            replica_initializer_image=${{ secrets.DOCKERHUB_USERNAME }}/replica_initializer:${{ github.run_number }}
            
            # container names
            mongo_primary_container_name=mongodb_primary
            mongo_secondary_1_container_name=mongodb_secondary_1
            mongo_secondary_2_container_name=mongodb_secondary_2
            yolo_container_name=yolo_app
            polybot_container_name=polybot_app
            replica_initializer_name=replica_initializer
            
            # networks names
            mongodb_replica_set=mongodb_replica_set
            mongodb_primary_to_yolo=mongodb_primary_to_yolo
            yolo_to_polybot=yolo_to_polybot
            driver=bridge
            
            # AWS variables
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            TELEGRAM_TOKEN = ${{ secrets.TELEGRAM_BOT_TOKEN }}
            """ > .env
            
            # Take the service down
            docker compose down
            docker volume rm polybotservice_mongodb_primary_volume
            docker volume rm polybotservice_mongodb_secondary_1_volume
            docker volume rm polybotservice_mongodb_secondary_2_volume

            # Take it up with the current updated values
            docker compose up -d
